service: sls-oauth

frameworkVersion: "3"
package:
  patterns:
    - '!README.md'
    - '!LICENSE'
    - '!resources/**'

custom:
  stage: ${opt:stage, "dev1"} # dev1, v1, dev2, v2, etc
  envs: ${file(resources/${self:custom.stage}-envs.yml)}

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 128
  timeout: 29
  region: us-east-1
  stage: ${self:custom.stage}
  httpApi:
    cors: true
  # Environment Variables
  environment:
    ${self:custom.envs}
    # IAM policies
    #iamRoleStatements:
      # none needed yet, may incorporate handle errors later

# layers
layers:
  CommonModules:
    path: layers/CommonModules
    compatibleRuntimes:
      - nodejs18.x
    name: ${self:provider.stage}-oauth-commonModules
    description: "googleapis create-response-object"

# functions: All lambda handlers are in 1 handlers.js file
functions:
  generateauthurl:
    handler: lambdas/handlers.generateauthurl
    description: "APIG/Lambda to generate OAUTH2 Authorization URL"
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'GET /generateauthurl'
  generatetoken:
    handler: lambdas/handlers.generatetoken
    description: "APIG/Lambda to generate OAUTH2 Authorization URL"
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'POST /generatetoken'
  refreshtoken:
    handler: lambdas/handlers.refreshtoken
    description: "APIG/Lambda to refresh OAuth2 access tokens"
    layers:
      - {Ref: CommonModulesLambdaLayer}
    events:
      - httpApi: 'POST /refreshtoken'
